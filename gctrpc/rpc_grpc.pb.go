// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: rpc.proto

package gctrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoCryptoTraderService_GetInfo_FullMethodName         = "/gctrpc.GoCryptoTraderService/GetInfo"
	GoCryptoTraderService_GetRPCEndpoints_FullMethodName = "/gctrpc.GoCryptoTraderService/GetRPCEndpoints"
	GoCryptoTraderService_GetAccounts_FullMethodName     = "/gctrpc.GoCryptoTraderService/GetAccounts"
	GoCryptoTraderService_GetTokenPrice_FullMethodName   = "/gctrpc.GoCryptoTraderService/GetTokenPrice"
	GoCryptoTraderService_Crypto_FullMethodName          = "/gctrpc.GoCryptoTraderService/Crypto"
	GoCryptoTraderService_TransferSOL_FullMethodName     = "/gctrpc.GoCryptoTraderService/TransferSOL"
	GoCryptoTraderService_TransferToken_FullMethodName   = "/gctrpc.GoCryptoTraderService/TransferToken"
)

// GoCryptoTraderServiceClient is the client API for GoCryptoTraderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoCryptoTraderServiceClient interface {
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	GetRPCEndpoints(ctx context.Context, in *GetRPCEndpointsRequest, opts ...grpc.CallOption) (*GetRPCEndpointsResponse, error)
	GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
	GetTokenPrice(ctx context.Context, in *GetTokenPriceRequest, opts ...grpc.CallOption) (*GetTokenPriceResponse, error)
	Crypto(ctx context.Context, in *CryptoRequest, opts ...grpc.CallOption) (*CryptoResponse, error)
	TransferSOL(ctx context.Context, in *TransferSOLRequest, opts ...grpc.CallOption) (*TransferSOLResponse, error)
	TransferToken(ctx context.Context, in *TransferTokenRequest, opts ...grpc.CallOption) (*TransferTokenResponse, error)
}

type goCryptoTraderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoCryptoTraderServiceClient(cc grpc.ClientConnInterface) GoCryptoTraderServiceClient {
	return &goCryptoTraderServiceClient{cc}
}

func (c *goCryptoTraderServiceClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, GoCryptoTraderService_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCryptoTraderServiceClient) GetRPCEndpoints(ctx context.Context, in *GetRPCEndpointsRequest, opts ...grpc.CallOption) (*GetRPCEndpointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRPCEndpointsResponse)
	err := c.cc.Invoke(ctx, GoCryptoTraderService_GetRPCEndpoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCryptoTraderServiceClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, GoCryptoTraderService_GetAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCryptoTraderServiceClient) GetTokenPrice(ctx context.Context, in *GetTokenPriceRequest, opts ...grpc.CallOption) (*GetTokenPriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenPriceResponse)
	err := c.cc.Invoke(ctx, GoCryptoTraderService_GetTokenPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCryptoTraderServiceClient) Crypto(ctx context.Context, in *CryptoRequest, opts ...grpc.CallOption) (*CryptoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CryptoResponse)
	err := c.cc.Invoke(ctx, GoCryptoTraderService_Crypto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCryptoTraderServiceClient) TransferSOL(ctx context.Context, in *TransferSOLRequest, opts ...grpc.CallOption) (*TransferSOLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferSOLResponse)
	err := c.cc.Invoke(ctx, GoCryptoTraderService_TransferSOL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCryptoTraderServiceClient) TransferToken(ctx context.Context, in *TransferTokenRequest, opts ...grpc.CallOption) (*TransferTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferTokenResponse)
	err := c.cc.Invoke(ctx, GoCryptoTraderService_TransferToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoCryptoTraderServiceServer is the server API for GoCryptoTraderService service.
// All implementations must embed UnimplementedGoCryptoTraderServiceServer
// for forward compatibility.
type GoCryptoTraderServiceServer interface {
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	GetRPCEndpoints(context.Context, *GetRPCEndpointsRequest) (*GetRPCEndpointsResponse, error)
	GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
	GetTokenPrice(context.Context, *GetTokenPriceRequest) (*GetTokenPriceResponse, error)
	Crypto(context.Context, *CryptoRequest) (*CryptoResponse, error)
	TransferSOL(context.Context, *TransferSOLRequest) (*TransferSOLResponse, error)
	TransferToken(context.Context, *TransferTokenRequest) (*TransferTokenResponse, error)
	mustEmbedUnimplementedGoCryptoTraderServiceServer()
}

// UnimplementedGoCryptoTraderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoCryptoTraderServiceServer struct{}

func (UnimplementedGoCryptoTraderServiceServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedGoCryptoTraderServiceServer) GetRPCEndpoints(context.Context, *GetRPCEndpointsRequest) (*GetRPCEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRPCEndpoints not implemented")
}
func (UnimplementedGoCryptoTraderServiceServer) GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedGoCryptoTraderServiceServer) GetTokenPrice(context.Context, *GetTokenPriceRequest) (*GetTokenPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenPrice not implemented")
}
func (UnimplementedGoCryptoTraderServiceServer) Crypto(context.Context, *CryptoRequest) (*CryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crypto not implemented")
}
func (UnimplementedGoCryptoTraderServiceServer) TransferSOL(context.Context, *TransferSOLRequest) (*TransferSOLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferSOL not implemented")
}
func (UnimplementedGoCryptoTraderServiceServer) TransferToken(context.Context, *TransferTokenRequest) (*TransferTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferToken not implemented")
}
func (UnimplementedGoCryptoTraderServiceServer) mustEmbedUnimplementedGoCryptoTraderServiceServer() {}
func (UnimplementedGoCryptoTraderServiceServer) testEmbeddedByValue()                               {}

// UnsafeGoCryptoTraderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoCryptoTraderServiceServer will
// result in compilation errors.
type UnsafeGoCryptoTraderServiceServer interface {
	mustEmbedUnimplementedGoCryptoTraderServiceServer()
}

func RegisterGoCryptoTraderServiceServer(s grpc.ServiceRegistrar, srv GoCryptoTraderServiceServer) {
	// If the following call pancis, it indicates UnimplementedGoCryptoTraderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoCryptoTraderService_ServiceDesc, srv)
}

func _GoCryptoTraderService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCryptoTraderServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoCryptoTraderService_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCryptoTraderServiceServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCryptoTraderService_GetRPCEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRPCEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCryptoTraderServiceServer).GetRPCEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoCryptoTraderService_GetRPCEndpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCryptoTraderServiceServer).GetRPCEndpoints(ctx, req.(*GetRPCEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCryptoTraderService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCryptoTraderServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoCryptoTraderService_GetAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCryptoTraderServiceServer).GetAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCryptoTraderService_GetTokenPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCryptoTraderServiceServer).GetTokenPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoCryptoTraderService_GetTokenPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCryptoTraderServiceServer).GetTokenPrice(ctx, req.(*GetTokenPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCryptoTraderService_Crypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCryptoTraderServiceServer).Crypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoCryptoTraderService_Crypto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCryptoTraderServiceServer).Crypto(ctx, req.(*CryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCryptoTraderService_TransferSOL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferSOLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCryptoTraderServiceServer).TransferSOL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoCryptoTraderService_TransferSOL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCryptoTraderServiceServer).TransferSOL(ctx, req.(*TransferSOLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCryptoTraderService_TransferToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCryptoTraderServiceServer).TransferToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoCryptoTraderService_TransferToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCryptoTraderServiceServer).TransferToken(ctx, req.(*TransferTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoCryptoTraderService_ServiceDesc is the grpc.ServiceDesc for GoCryptoTraderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoCryptoTraderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gctrpc.GoCryptoTraderService",
	HandlerType: (*GoCryptoTraderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _GoCryptoTraderService_GetInfo_Handler,
		},
		{
			MethodName: "GetRPCEndpoints",
			Handler:    _GoCryptoTraderService_GetRPCEndpoints_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _GoCryptoTraderService_GetAccounts_Handler,
		},
		{
			MethodName: "GetTokenPrice",
			Handler:    _GoCryptoTraderService_GetTokenPrice_Handler,
		},
		{
			MethodName: "Crypto",
			Handler:    _GoCryptoTraderService_Crypto_Handler,
		},
		{
			MethodName: "TransferSOL",
			Handler:    _GoCryptoTraderService_TransferSOL_Handler,
		},
		{
			MethodName: "TransferToken",
			Handler:    _GoCryptoTraderService_TransferToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
